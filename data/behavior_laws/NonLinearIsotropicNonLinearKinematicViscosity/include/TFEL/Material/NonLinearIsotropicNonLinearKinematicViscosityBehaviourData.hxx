/*!
* \file   TFEL/Material/NonLinearIsotropicNonLinearKinematicViscosityBehaviourData.hxx
* \brief  this file implements the NonLinearIsotropicNonLinearKinematicViscosityBehaviourData class.
*         File generated by tfel version 4.1.0
* \author Baris Telmen
 */

#ifndef LIB_TFELMATERIAL_NONLINEARISOTROPICNONLINEARKINEMATICVISCOSITY_BEHAVIOUR_DATA_HXX
#define LIB_TFELMATERIAL_NONLINEARISOTROPICNONLINEARKINEMATICVISCOSITY_BEHAVIOUR_DATA_HXX

#include<limits>
#include<string>
#include<sstream>
#include<iostream>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/Abs.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Math/Array/ViewsArrayIO.hxx"
#include"TFEL/Math/Array/fsarrayIO.hxx"
#include"TFEL/Math/Array/runtime_arrayIO.hxx"
#include"TFEL/Math/fsarray.hxx"
#include"TFEL/Math/runtime_array.hxx"
#include"TFEL/Math/tvector.hxx"
#include"TFEL/Math/Vector/tvectorIO.hxx"
#include"TFEL/Math/tmatrix.hxx"
#include"TFEL/Math/Matrix/tmatrixIO.hxx"
#include"TFEL/Math/stensor.hxx"
#include"TFEL/Math/Stensor/StensorConceptIO.hxx"
#include"TFEL/Math/st2tost2.hxx"
#include"TFEL/Math/ST2toST2/ST2toST2ConceptIO.hxx"
#include"TFEL/Material/ModellingHypothesis.hxx"

#include"MFront/Aster/Aster.hxx"

namespace tfel::material{

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename,bool>
class NonLinearIsotropicNonLinearKinematicViscosityBehaviourData;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType,bool use_qt>
class NonLinearIsotropicNonLinearKinematicViscosityIntegrationData;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename NumericType>
std::ostream&
 operator <<(std::ostream&,const NonLinearIsotropicNonLinearKinematicViscosityBehaviourData<hypothesis, NumericType,false>&);

template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
class NonLinearIsotropicNonLinearKinematicViscosityBehaviourData<hypothesis, NumericType,false>
{

static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<NumericType>::cond);
static_assert(tfel::typetraits::IsReal<NumericType>::cond);

friend std::ostream& operator<< <>(std::ostream&,const NonLinearIsotropicNonLinearKinematicViscosityBehaviourData&);

/* integration data is declared friend to access   driving variables at the beginning of the time step */
friend class NonLinearIsotropicNonLinearKinematicViscosityIntegrationData<hypothesis, NumericType, false>;

static constexpr unsigned short TVectorSize = N;
using StensorDimeToSize = tfel::math::StensorDimeToSize<N>;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
using TensorDimeToSize = tfel::math::TensorDimeToSize<N>;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N, NumericType, false>;
using Type = NumericType;
using numeric_type = typename Types::numeric_type;
using real = typename Types::real;
using time = typename Types::time;
using length = typename Types::length;
using frequency = typename Types::frequency;
using speed = typename Types::speed;
using stress = typename Types::stress;
using strain = typename Types::strain;
using strainrate = typename Types::strainrate;
using stressrate = typename Types::stressrate;
using temperature = typename Types::temperature;
using thermalexpansion = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity = typename Types::massdensity;
using energydensity = typename Types::energydensity;
using TVector = typename Types::TVector;
using DisplacementTVector = typename Types::DisplacementTVector;
using ForceTVector = typename Types::ForceTVector;
using HeatFlux = typename Types::HeatFlux;
using TemperatureGradient = typename Types::TemperatureGradient;
using Stensor = typename Types::Stensor;
using StressStensor = typename Types::StressStensor;
using StressRateStensor = typename Types::StressRateStensor;
using StrainStensor = typename Types::StrainStensor;
using StrainRateStensor = typename Types::StrainRateStensor;
using FrequencyStensor = typename Types::FrequencyStensor;
using Tensor = typename Types::Tensor;
using DeformationGradientTensor = typename Types::DeformationGradientTensor;
using DeformationGradientRateTensor = typename Types::DeformationGradientRateTensor;
using StressTensor = typename Types::StressTensor;
using StiffnessTensor = typename Types::StiffnessTensor;
using Stensor4 = typename Types::Stensor4;
using TangentOperator = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<NumericType, false>;

protected:

StrainStensor eto;

StressStensor sig;

#line 21 "NonLinearIsotropicNonLinearKinematicViscosity.mfront"
real young;
#line 23 "NonLinearIsotropicNonLinearKinematicViscosity.mfront"
real nu;
#line 25 "NonLinearIsotropicNonLinearKinematicViscosity.mfront"
stress Rinf;
#line 26 "NonLinearIsotropicNonLinearKinematicViscosity.mfront"
stress R0;
#line 27 "NonLinearIsotropicNonLinearKinematicViscosity.mfront"
real b;
#line 28 "NonLinearIsotropicNonLinearKinematicViscosity.mfront"
tfel::math::fsarray<2, stress > C;
#line 29 "NonLinearIsotropicNonLinearKinematicViscosity.mfront"
tfel::math::fsarray<2, real > g;
#line 30 "NonLinearIsotropicNonLinearKinematicViscosity.mfront"
real m;
#line 31 "NonLinearIsotropicNonLinearKinematicViscosity.mfront"
stress UNsurK;

StrainStensor eel;
#line 18 "NonLinearIsotropicNonLinearKinematicViscosity.mfront"
strain p;
#line 19 "NonLinearIsotropicNonLinearKinematicViscosity.mfront"
tfel::math::fsarray<2, StrainStensor > a;
temperature T;

public:

/*!
* \brief Default constructor
*/
NonLinearIsotropicNonLinearKinematicViscosityBehaviourData()
{}

/*!
* \brief copy constructor
*/
NonLinearIsotropicNonLinearKinematicViscosityBehaviourData(const NonLinearIsotropicNonLinearKinematicViscosityBehaviourData& src)
: eto(src.eto),
sig(src.sig),
young(src.young),
nu(src.nu),
Rinf(src.Rinf),
R0(src.R0),
b(src.b),
C(src.C),
g(src.g),
m(src.m),
UNsurK(src.UNsurK),
eel(src.eel),
p(src.p),
a(src.a),
T(src.T)
{}

/*
 * \brief constructor for the Aster interface
 * \param[in] ASTERT_: temperature
 * \param[in] ASTERmat: material properties
 * \param[in] ASTERint_vars: state variables
 * \param[in] ASTERext_vars: external std::ate variables
 */
NonLinearIsotropicNonLinearKinematicViscosityBehaviourData(const NumericType* const ASTERT_,const NumericType* const ASTERmat,
const NumericType* const ASTERint_vars
,const NumericType* const)
: young(ASTERmat[0-0]),
nu(ASTERmat[1-0]),
Rinf(ASTERmat[2-0]),
R0(ASTERmat[3-0]),
b(ASTERmat[4-0]),
m(ASTERmat[9-0]),
UNsurK(ASTERmat[10-0]),
eel(&ASTERint_vars[0]),
p(ASTERint_vars[StensorSize]),
T(*ASTERT_)
{
C[0] = ASTERmat[5];
C[1] = ASTERmat[6];
g[0] = ASTERmat[7];
g[1] = ASTERmat[8];
a[0].import(&ASTERint_vars[StensorSize+1]);
a[1].import(&ASTERint_vars[2*StensorSize+1]);
}

void setASTERBehaviourDataGradients(const NumericType* const ASTERstran)
{
this->eto.importVoigt(ASTERstran);
}

void setASTERBehaviourDataThermodynamicForces(const NumericType* const ASTERstress_)
{
this->sig.importTab(ASTERstress_);
}


/*
* \brief Assignement operator
*/
NonLinearIsotropicNonLinearKinematicViscosityBehaviourData&
operator=(const NonLinearIsotropicNonLinearKinematicViscosityBehaviourData& src){
this->eto = src.eto;
this->sig = src.sig;
this->young = src.young;
this->nu = src.nu;
this->Rinf = src.Rinf;
this->R0 = src.R0;
this->b = src.b;
this->C = src.C;
this->g = src.g;
this->m = src.m;
this->UNsurK = src.UNsurK;
this->eel = src.eel;
this->p = src.p;
this->a = src.a;
this->T = src.T;
return *this;
}

void
ASTERexportStateData(NumericType * const ASTERstress_, NumericType * const ASTERstatev) const
{
using namespace tfel::math;
this->sig.exportTab(ASTERstress_);
exportToBaseTypeArray(this->eel,&ASTERstatev[0]);
ASTERstatev[StensorSize] = this->p;
exportToBaseTypeArray(this->a[0],&ASTERstatev[StensorSize+1]);
exportToBaseTypeArray(this->a[1],&ASTERstatev[2*StensorSize+1]);
} // end of ASTERexportStateData

}; // end of NonLinearIsotropicNonLinearKinematicViscosityBehaviourDataclass

template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
std::ostream&
operator <<(std::ostream& os,const NonLinearIsotropicNonLinearKinematicViscosityBehaviourData<hypothesis, NumericType, false>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "σ : " << b.sig << '\n';
os << "young : " << b.young << '\n';
os << "nu : " << b.nu << '\n';
os << "Rinf : " << b.Rinf << '\n';
os << "R0 : " << b.R0 << '\n';
os << "b : " << b.b << '\n';
os << "C : " << b.C << '\n';
os << "g : " << b.g << '\n';
os << "m : " << b.m << '\n';
os << "UNsurK : " << b.UNsurK << '\n';
os << "εᵉˡ : " << b.eel << '\n';
os << "p : " << b.p << '\n';
os << "a : " << b.a << '\n';
os << "T : " << b.T << '\n';
return os;
}

} // end of namespace tfel::material

#endif /* LIB_TFELMATERIAL_NONLINEARISOTROPICNONLINEARKINEMATICVISCOSITY_BEHAVIOUR_DATA_HXX */
