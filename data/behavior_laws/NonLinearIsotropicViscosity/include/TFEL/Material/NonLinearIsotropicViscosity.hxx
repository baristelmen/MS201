/*!
* \file   TFEL/Material/NonLinearIsotropicViscosity.hxx
* \brief  this file implements the NonLinearIsotropicViscosity Behaviour.
*         File generated by tfel version 4.1.0
* \author Baris Telmen
 */

#ifndef LIB_TFELMATERIAL_NONLINEARISOTROPICVISCOSITY_HXX
#define LIB_TFELMATERIAL_NONLINEARISOTROPICVISCOSITY_HXX

#include<string>
#include<iostream>
#include<limits>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Material/MaterialException.hxx"
#include"TFEL/Material/MechanicalBehaviour.hxx"
#include"TFEL/Material/MechanicalBehaviourTraits.hxx"
#include"TFEL/Material/OutOfBoundsPolicy.hxx"
#include"TFEL/Material/BoundsCheck.hxx"
#include"TFEL/Material/IsotropicPlasticity.hxx"
#include"TFEL/Material/Lame.hxx"
#include"TFEL/Material/Hosford1972YieldCriterion.hxx"
#include"MFront/BehaviourProfiler.hxx"
#include"TFEL/Material/NonLinearIsotropicViscosityBehaviourData.hxx"
#include"TFEL/Material/NonLinearIsotropicViscosityIntegrationData.hxx"

#include"TFEL/Math/Array/ViewsArray.hxx"
#include"TFEL/Math/tvector.hxx"
#include"TFEL/Math/Vector/tvectorIO.hxx"
#include"TFEL/Math/tmatrix.hxx"
#include"TFEL/Math/Matrix/tmatrixIO.hxx"
#include"TFEL/Math/st2tost2.hxx"
#include"TFEL/Math/ST2toST2/ST2toST2ConceptIO.hxx"
#include"TFEL/Math/TinyNewtonRaphsonSolver.hxx"
#include"MFront/Aster/Aster.hxx"

namespace tfel::material{

struct NonLinearIsotropicViscosityParametersInitializer
{
static NonLinearIsotropicViscosityParametersInitializer&
get();

double relative_value_for_the_equivalent_stress_lower_bound;
double theta;
double epsilon;
double jacobianComparisonCriterion;
double minimal_time_step_scaling_factor;
double maximal_time_step_scaling_factor;
double numerical_jacobian_epsilon;
unsigned short iterMax;

void set(const char* const,const double);

void set(const char* const,const unsigned short);

/*!
 * \brief convert a string to double
 * \param[in] p : parameter
 * \param[in] v : value
 */
static double getDouble(const std::string&,const std::string&);
/*!
 * \brief convert a string to unsigned short
 * \param[in] p : parameter
 * \param[in] v : value
 */
static unsigned short getUnsignedShort(const std::string&,const std::string&);
private :

NonLinearIsotropicViscosityParametersInitializer();

NonLinearIsotropicViscosityParametersInitializer(const NonLinearIsotropicViscosityParametersInitializer&);

NonLinearIsotropicViscosityParametersInitializer&
operator=(const NonLinearIsotropicViscosityParametersInitializer&);
/*!
 * \brief read the parameters from the given file
 * \param[out] pi : parameters initializer
 * \param[in]  fn : file name
 */
static void readParameters(NonLinearIsotropicViscosityParametersInitializer&,const char* const);
};

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis, typename NumericType, bool use_qt>
struct NonLinearIsotropicViscosity;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
std::ostream&
 operator <<(std::ostream&,const NonLinearIsotropicViscosity<hypothesis, NumericType, false>&);

/*!
 * NonLinearIsotropicViscosity profiler
 */
struct NonLinearIsotropicViscosityProfiler
{
//! return the profiler associated with the behaviour
static mfront::BehaviourProfiler& getProfiler();
}; // end of struct NonLinearIsotropicViscosityProfiler

/*!
* \class NonLinearIsotropicViscosity
* \brief This class implements the NonLinearIsotropicViscosity behaviour.
* \tparam hypothesis: modelling hypothesis.
* \tparam NumericType: numerical type.
* \author Baris Telmen
* Non - Linear isotropic hardening with 
* viscosity addition 
*/
template<ModellingHypothesis::Hypothesis hypothesis,typename NumericType>
struct NonLinearIsotropicViscosity<hypothesis, NumericType, false> final
: public MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>,
public NonLinearIsotropicViscosityProfiler,
public NonLinearIsotropicViscosityBehaviourData<hypothesis, NumericType, false>,
public NonLinearIsotropicViscosityIntegrationData<hypothesis, NumericType, false>,
public tfel::math::TinyNewtonRaphsonSolver<ModellingHypothesisToStensorSize<hypothesis>::value+1, NumericType, NonLinearIsotropicViscosity<hypothesis, NumericType, false>>{

static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;

static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<NumericType>::cond);
static_assert(tfel::typetraits::IsReal<NumericType>::cond);

friend std::ostream& operator<< <>(std::ostream&,const NonLinearIsotropicViscosity&);

friend struct tfel::math::TinyNonLinearSolverBase<ModellingHypothesisToStensorSize<hypothesis>::value+1, NumericType, NonLinearIsotropicViscosity>;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N, NumericType, false>;
using Type = NumericType;
using numeric_type = typename Types::numeric_type;
using real = typename Types::real;
using time = typename Types::time;
using length = typename Types::length;
using frequency = typename Types::frequency;
using speed = typename Types::speed;
using stress = typename Types::stress;
using strain = typename Types::strain;
using strainrate = typename Types::strainrate;
using stressrate = typename Types::stressrate;
using temperature = typename Types::temperature;
using thermalexpansion = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity = typename Types::massdensity;
using energydensity = typename Types::energydensity;
using TVector = typename Types::TVector;
using DisplacementTVector = typename Types::DisplacementTVector;
using ForceTVector = typename Types::ForceTVector;
using HeatFlux = typename Types::HeatFlux;
using TemperatureGradient = typename Types::TemperatureGradient;
using Stensor = typename Types::Stensor;
using StressStensor = typename Types::StressStensor;
using StressRateStensor = typename Types::StressRateStensor;
using StrainStensor = typename Types::StrainStensor;
using StrainRateStensor = typename Types::StrainRateStensor;
using FrequencyStensor = typename Types::FrequencyStensor;
using Tensor = typename Types::Tensor;
using DeformationGradientTensor = typename Types::DeformationGradientTensor;
using DeformationGradientRateTensor = typename Types::DeformationGradientRateTensor;
using StressTensor = typename Types::StressTensor;
using StiffnessTensor = typename Types::StiffnessTensor;
using Stensor4 = typename Types::Stensor4;
using TangentOperator = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<NumericType, false>;

public :

typedef NonLinearIsotropicViscosityBehaviourData<hypothesis, NumericType, false> BehaviourData;
typedef NonLinearIsotropicViscosityIntegrationData<hypothesis, NumericType, false> IntegrationData;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMFlag SMFlag;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMType SMType;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::ELASTIC;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SECANTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::TANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::CONSISTENTTANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::NOSTIFFNESSREQUESTED;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR;
using IntegrationResult = typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::IntegrationResult;

using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::UNRELIABLE_RESULTS;

using StressFreeExpansionType = StrainStensor;

private :



tfel::math::View<StrainStensor> deel;
#line 28 "NonLinearIsotropicViscosity.mfront"
real& dp;

#line 31 "NonLinearIsotropicViscosity.mfront"
bool Fel;
struct{
stress lambda;
stress mu;
} sebdata;

real relative_value_for_the_equivalent_stress_lower_bound;
NumericType theta;
NumericType epsilon;
real jacobianComparisonCriterion;
real minimal_time_step_scaling_factor;
real maximal_time_step_scaling_factor;
NumericType numerical_jacobian_epsilon;
ushort iterMax;

//! Tangent operator;
TangentOperator Dt;
//! alias to the tangent operator;
TangentOperator& dsig_ddeto;
// updating material properties, in mandatory
void updateMaterialPropertiesDependantOnStateVariables(){
using namespace std;
using namespace tfel::math;
using std::vector;
}

SMType stiffness_matrix_type;
void computeNumericalJacobian(tfel::math::tmatrix<StensorSize+1,StensorSize+1, NumericType>& njacobian)
{
using namespace std;
using namespace tfel::math;
tvector<StensorSize+1, NumericType> tzeros(this->zeros);
tvector<StensorSize+1, NumericType> tfzeros(this->fzeros);
tmatrix<StensorSize+1,StensorSize+1, NumericType> tjacobian(this->jacobian);
for(ushort mfront_idx = 0; mfront_idx != StensorSize+1; ++mfront_idx){
this->zeros(mfront_idx) -= this->numerical_jacobian_epsilon;
this->computeThermodynamicForces();
this->computeFdF(true);
this->zeros = tzeros;
tvector<StensorSize+1, NumericType> tfzeros2(this->fzeros);
this->zeros(mfront_idx) += this->numerical_jacobian_epsilon;
this->computeThermodynamicForces();
this->computeFdF(true);
this->fzeros = (this->fzeros-tfzeros2) / (2 * (this->numerical_jacobian_epsilon));
for(ushort mfront_idx2 = 0; mfront_idx2!= StensorSize+1; ++mfront_idx2){
njacobian(mfront_idx2,mfront_idx) = this->fzeros(mfront_idx2);
}
this->zeros    = tzeros;
this->fzeros   = tfzeros;
}
if(&njacobian!=&(this->jacobian)){
this->jacobian = tjacobian;
}
}

[[nodiscard]] bool
computePartialJacobianInvert(const tfel::math::TinyPermutation<StensorSize+1>& jacobian_permutation, tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel)
{
using namespace tfel::math;
for(ushort mfront_idx=0; mfront_idx !=StensorSize; ++mfront_idx){
tvector<StensorSize+1, NumericType> vect_e(NumericType(0));
vect_e(mfront_idx) = NumericType(1);
if(!TinyMatrixSolve<StensorSize+1, NumericType, false>::back_substitute(this->jacobian, jacobian_permutation, vect_e)){
return false;
}
for(ushort mfront_idx2=0; mfront_idx2!=StensorSize; ++mfront_idx2){
partial_jacobian_eel(mfront_idx2,mfront_idx)=vect_e(mfront_idx2);
}
}
return true;
}

[[nodiscard]] bool
computePartialJacobianInvert(const tfel::math::TinyPermutation<StensorSize+1>& jacobian_permutation, tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_p)
{
using namespace tfel::math;
for(ushort mfront_idx=0; mfront_idx !=StensorSize; ++mfront_idx){
tvector<StensorSize+1, NumericType> vect_e(NumericType(0));
vect_e(mfront_idx) = NumericType(1);
if(!TinyMatrixSolve<StensorSize+1, NumericType, false>::back_substitute(this->jacobian, jacobian_permutation, vect_e)){
return false;
}
for(ushort mfront_idx2=0; mfront_idx2!=StensorSize; ++mfront_idx2){
partial_jacobian_eel(mfront_idx2,mfront_idx)=vect_e(mfront_idx2);
}
partial_jacobian_p(mfront_idx)=vect_e(StensorSize);
}
return true;
}

void computeThermodynamicForces(){
using namespace std;
using namespace tfel::math;
using std::vector;
{
mfront::BehaviourProfiler::Timer mfront_local_timer(NonLinearIsotropicViscosityProfiler::getProfiler(),mfront::BehaviourProfiler::COMPUTETHERMODYNAMICFORCES);
this->sig = (this->sebdata.lambda)*trace(this->eel+(this->theta)*(this->deel))*Stensor::Id()+2*(this->sebdata.mu)*(this->eel+(this->theta)*(this->deel));
}

} // end of NonLinearIsotropicViscosity::computeThermodynamicForces

void computeFinalThermodynamicForces(){
using namespace std;
using namespace tfel::math;
using std::vector;
{
mfront::BehaviourProfiler::Timer mfront_local_timer(NonLinearIsotropicViscosityProfiler::getProfiler(),mfront::BehaviourProfiler::COMPUTEFINALTHERMODYNAMICFORCES);
this->sig = (this->sebdata.lambda)*trace(this->eel)*Stensor::Id()+2*(this->sebdata.mu)*this->eel;
}

} // end of NonLinearIsotropicViscosity::computeFinalThermodynamicForces

/*!
* \brief Update internal variables at end of integration
*/
void updateIntegrationVariables(){
}

/*!
* \brief Update internal variables at end of integration
*/
void updateStateVariables(){
this->eel += this->deel;
this->p += this->dp;
}

/*!
* \brief Update auxiliary state variables at end of integration
*/
void updateAuxiliaryStateVariables()
{}

//! \brief return an elastic prediction of the stresses
StressStensor computeElasticPrediction() const{
return this->sebdata.lambda*trace(this->eel+(this->theta)*(this->deto))*Stensor::Id()+2*(this->sebdata.mu)*(this->eel+(this->theta)*(this->deto));
}


//! \brief Default constructor (disabled)
NonLinearIsotropicViscosity() =delete ;
//! \brief Copy constructor (disabled)
NonLinearIsotropicViscosity(const NonLinearIsotropicViscosity&) = delete;
//! \brief Assignement operator (disabled)
NonLinearIsotropicViscosity& operator = (const NonLinearIsotropicViscosity&) = delete;

public:

/*!
* \brief Constructor
*/
NonLinearIsotropicViscosity(const NonLinearIsotropicViscosityBehaviourData<hypothesis, NumericType, false>& src1,
const NonLinearIsotropicViscosityIntegrationData<hypothesis, NumericType, false>& src2)
: NonLinearIsotropicViscosityBehaviourData<hypothesis, NumericType, false>(src1),
NonLinearIsotropicViscosityIntegrationData<hypothesis, NumericType, false>(src2),
deel(tfel::math::map<StrainStensor, 0>(this->zeros)),
dp(this->zeros(StensorSize)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->relative_value_for_the_equivalent_stress_lower_bound = NonLinearIsotropicViscosityParametersInitializer::get().relative_value_for_the_equivalent_stress_lower_bound;
this->theta = NonLinearIsotropicViscosityParametersInitializer::get().theta;
this->epsilon = NonLinearIsotropicViscosityParametersInitializer::get().epsilon;
this->jacobianComparisonCriterion = NonLinearIsotropicViscosityParametersInitializer::get().jacobianComparisonCriterion;
this->minimal_time_step_scaling_factor = NonLinearIsotropicViscosityParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = NonLinearIsotropicViscosityParametersInitializer::get().maximal_time_step_scaling_factor;
this->numerical_jacobian_epsilon = NonLinearIsotropicViscosityParametersInitializer::get().numerical_jacobian_epsilon;
this->iterMax = NonLinearIsotropicViscosityParametersInitializer::get().iterMax;
}

/*
 * \brief constructor for the Aster interface
 * \param[in] ASTERdt_: time increment
 * \param[in] ASTERT_: temperature
 * \param[in] ASTERdT_: temperature increment
 * \param[in] ASTERmat: material properties
 * \param[in] ASTERint_vars: state variables
 * \param[in] ASTERext_vars: external state variables
 * \param[in] ASTERdext_vars: external state variables increments
 */
NonLinearIsotropicViscosity(const NumericType* const ASTERdt_,
const NumericType* const ASTERT_,
const NumericType* const ASTERdT_,
const NumericType* const ASTERmat,
const NumericType* const ASTERint_vars,
const NumericType* const ASTERext_vars,
const NumericType* const ASTERdext_vars)
: NonLinearIsotropicViscosityBehaviourData<hypothesis, NumericType,false>(ASTERT_,ASTERmat,
ASTERint_vars,ASTERext_vars),
NonLinearIsotropicViscosityIntegrationData<hypothesis, NumericType,false>(ASTERdt_,ASTERdT_,ASTERdext_vars),
deel(tfel::math::map<StrainStensor, 0>(this->zeros)),
dp(this->zeros(StensorSize)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->relative_value_for_the_equivalent_stress_lower_bound = NonLinearIsotropicViscosityParametersInitializer::get().relative_value_for_the_equivalent_stress_lower_bound;
this->theta = NonLinearIsotropicViscosityParametersInitializer::get().theta;
this->epsilon = NonLinearIsotropicViscosityParametersInitializer::get().epsilon;
this->jacobianComparisonCriterion = NonLinearIsotropicViscosityParametersInitializer::get().jacobianComparisonCriterion;
this->minimal_time_step_scaling_factor = NonLinearIsotropicViscosityParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = NonLinearIsotropicViscosityParametersInitializer::get().maximal_time_step_scaling_factor;
this->numerical_jacobian_epsilon = NonLinearIsotropicViscosityParametersInitializer::get().numerical_jacobian_epsilon;
this->iterMax = NonLinearIsotropicViscosityParametersInitializer::get().iterMax;
}

/*!
 * \ brief initialize the behaviour with user code
 */
[[nodiscard]] bool initialize(){
using namespace std;
using namespace tfel::math;
using std::vector;
{
mfront::BehaviourProfiler::Timer mfront_local_timer_binit(NonLinearIsotropicViscosityProfiler::getProfiler(),mfront::BehaviourProfiler::BEFOREINITIALIZELOCALVARIABLES);
// initialisation Lame's coefficients
this->sebdata.lambda = tfel::material::computeLambda(this->young,this->nu);
this->sebdata.mu = tfel::material::computeMu(this->young,this->nu);

}
{
mfront::BehaviourProfiler::Timer mfront_local_timer_init(NonLinearIsotropicViscosityProfiler::getProfiler(),mfront::BehaviourProfiler::INITIALIZELOCALVARIABLES);
#line 34 "NonLinearIsotropicViscosity.mfront"
StressStensor scin = computeElasticPrediction();
#line 35 "NonLinearIsotropicViscosity.mfront"
const stress seq = sigmaeq(scin);
#line 36 "NonLinearIsotropicViscosity.mfront"
const stress Rpel = this->R_inf + (this->R_0 - this->R_inf)*exp(-this->b*this->p);
#line 37 "NonLinearIsotropicViscosity.mfront"
this->Fel = seq - Rpel > 0;
}
return true;
}

/*!
 * \brief set the policy for "out of bounds" conditions
 */
void
setOutOfBoundsPolicy(const OutOfBoundsPolicy policy_value){
  this->policy = policy_value;
} // end of setOutOfBoundsPolicy

/*!
* \return the modelling hypothesis
*/
constexpr ModellingHypothesis::Hypothesis
getModellingHypothesis() const{
return hypothesis;
} // end of getModellingHypothesis

//! \brief check physical bounds and standard bounds
void checkBounds() const{
} // end of checkBounds

[[nodiscard]] IntegrationResult
computePredictionOperator(const SMFlag smflag,const SMType smt) override{
using namespace std;
using namespace tfel::math;
using std::vector;
tfel::raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid prediction operator flag");
{
mfront::BehaviourProfiler::Timer mfront_local_timer(NonLinearIsotropicViscosityProfiler::getProfiler(),mfront::BehaviourProfiler::COMPUTEPREDICTIONOPERATOR);
if((smt==ELASTIC)||(smt==SECANTOPERATOR)){
  computeAlteredElasticStiffness<hypothesis, stress>::exe(Dt,this->sebdata.lambda,this->sebdata.mu);
} else {
  return FAILURE;
}}
return SUCCESS;
}

real getMinimalTimeStepScalingFactor() const noexcept override{
  return this->minimal_time_step_scaling_factor;
}

std::pair<bool, real>
computeAPrioriTimeStepScalingFactor(const real current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPrioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                  current_time_step_scaling_factor)};
}

/*!
 * \brief Integrate behaviour law over the time step
 */
[[nodiscard]] IntegrationResult integrate(const SMFlag smflag,const SMType smt) override{
using namespace std;
using namespace tfel::math;
this->stiffness_matrix_type = smt;
tfel::raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid tangent operator flag");
{
mfront::BehaviourProfiler::Timer mfront_local_timer(NonLinearIsotropicViscosityProfiler::getProfiler(),mfront::BehaviourProfiler::INTEGRATOR);
tfel::math::TinyNewtonRaphsonSolver<ModellingHypothesisToStensorSize<hypothesis>::value+1, NumericType, NonLinearIsotropicViscosity<hypothesis, NumericType, false>>::epsilon = this->epsilon;
tfel::math::TinyNewtonRaphsonSolver<ModellingHypothesisToStensorSize<hypothesis>::value+1, NumericType, NonLinearIsotropicViscosity<hypothesis, NumericType, false>>::iterMax = this->iterMax;
if(!this->solveNonLinearSystem()){
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
}
if (this->stiffness_matrix_type != NOSTIFFNESSREQUESTED){
this->updateOrCheckJacobian();
}
}
this->updateIntegrationVariables();
this->updateStateVariables();
this->computeFinalThermodynamicForces();
this->updateAuxiliaryStateVariables();
if(smt!=NOSTIFFNESSREQUESTED){
if(!this->computeConsistentTangentOperator(smt)){
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
}
}
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
} // end of NonLinearIsotropicViscosity::integrate

bool computeResidual(){
this->computeThermodynamicForces();
return this->computeFdF(false);
}
//! \return the norm of the residual
NumericType computeResidualNorm() {
return tfel::math::norm(this->fzeros) / (StensorSize+1);
}
/*!
 * \brief check the convergence of the method
 * \param[in] error: current error
 */
bool checkConvergence(const NumericType error) {
auto converged = error < this->epsilon;
return converged;
}
/*!
 * \brief update the jacobian matrix if required.
 * \param[in] converged: boolean stating if the method is
 * called after the convergence of the algorithm or before
 * the computation of the next correction.
 *
 * This method can be used to compute the jacobian or part
 * of the jacobian numerically. If the jacobian was computed
 * in `computeResidual`, this method can be used to compare it
 * to a numerical approximation.
 */
void updateOrCheckJacobian(){
tfel::math::tmatrix<StensorSize+1, StensorSize+1, NumericType> njacobian;
auto jacobian_error = real{};this->computeNumericalJacobian(njacobian);
// derivative of variable feel with respect to variable eel
auto&& dfeel_ddeel = tfel::math::map_derivative<0, 0, StrainStensor, StrainStensor>(this->jacobian);
// numerical derivative of variable feel with respect to variable eel
auto&& ndfeel_ddeel = tfel::math::map_derivative<0, 0, StrainStensor, StrainStensor>(njacobian);
// derivative of variable feel with respect to variable p
auto&& dfeel_ddp = tfel::math::map_derivative<0, StensorSize, StrainStensor, strain>(this->jacobian);
// numerical derivative of variable feel with respect to variable p
auto&& ndfeel_ddp = tfel::math::map_derivative<0, StensorSize, StrainStensor, strain>(njacobian);
// derivative of variable fp with respect to variable eel
auto&& dfp_ddeel = tfel::math::map_derivative<StensorSize, 0, strain, StrainStensor>(this->jacobian);
// numerical derivative of variable fp with respect to variable eel
auto&& ndfp_ddeel = tfel::math::map_derivative<StensorSize, 0, strain, StrainStensor>(njacobian);
// derivative of variable fp with respect to variable p
auto&& dfp_ddp = tfel::math::map_derivative<StensorSize, StensorSize, strain, strain>(this->jacobian);
// numerical derivative of variable fp with respect to variable p
auto&& ndfp_ddp = tfel::math::map_derivative<StensorSize, StensorSize, strain, strain>(njacobian);
jacobian_error=StensorSize*StensorSize*(this->jacobianComparisonCriterion);
if(tfel::math::abs(dfeel_ddeel-ndfeel_ddeel) > jacobian_error)
{
std::cout << tfel::math::abs(dfeel_ddeel-ndfeel_ddeel) << " " << jacobian_error << '\n';
std::cout << "dfeel_ddeel :\n" << dfeel_ddeel << '\n';
std::cout << "ndfeel_ddeel :\n" << ndfeel_ddeel << '\n';
std::cout << "dfeel_ddeel - ndfeel_ddeel :\n" << dfeel_ddeel-ndfeel_ddeel << '\n';
std::cout << '\n';
}
jacobian_error=StensorSize*1*(this->jacobianComparisonCriterion);
if(tfel::math::abs(dfeel_ddp-ndfeel_ddp) > jacobian_error)
{
std::cout << tfel::math::abs(dfeel_ddp-ndfeel_ddp) << " " << jacobian_error << '\n';
std::cout << "dfeel_ddp :\n" << dfeel_ddp << '\n';
std::cout << "ndfeel_ddp :\n" << ndfeel_ddp << '\n';
std::cout << "dfeel_ddp - ndfeel_ddp :\n" << dfeel_ddp-ndfeel_ddp << '\n';
std::cout << '\n';
}
jacobian_error=1*StensorSize*(this->jacobianComparisonCriterion);
if(tfel::math::abs(dfp_ddeel-ndfp_ddeel) > jacobian_error)
{
std::cout << tfel::math::abs(dfp_ddeel-ndfp_ddeel) << " " << jacobian_error << '\n';
std::cout << "dfp_ddeel :\n" << dfp_ddeel << '\n';
std::cout << "ndfp_ddeel :\n" << ndfp_ddeel << '\n';
std::cout << "dfp_ddeel - ndfp_ddeel :\n" << dfp_ddeel-ndfp_ddeel << '\n';
std::cout << '\n';
}
jacobian_error=1*1*(this->jacobianComparisonCriterion);
if(tfel::math::abs(dfp_ddp-ndfp_ddp) > jacobian_error)
{
std::cout << tfel::math::abs(dfp_ddp-ndfp_ddp) << " " << jacobian_error << '\n';
std::cout << "dfp_ddp :\n" << dfp_ddp << '\n';
std::cout << "ndfp_ddp :\n" << ndfp_ddp << '\n';
std::cout << "dfp_ddp - ndfp_ddp :\n" << dfp_ddp-ndfp_ddp << '\n';
std::cout << '\n';
}
}
/*!
 * \brief method meant to set bounds on some components
 * of the current Newton correction or to implement a line
 * search.
 */
void processNewCorrection()
{
}
/*!
 * \brief method meant to process the new estimate.
 *
 * This method may be called to apply bounds on the
 * new estimate and update material properties
 * dependending on the current state.
 */
void processNewEstimate(){
this->updateMaterialPropertiesDependantOnStateVariables();
}
/*!
 * \brief solve linear system
 * \return true on success
 * \param[in] m: matrix
 * \param[in,out] v: right hand side on input, solution on output
 */
bool solveLinearSystem(tfel::math::tmatrix<StensorSize+1, StensorSize+1, NumericType>& mfront_matrix,tfel::math::tvector<StensorSize+1, NumericType>& mfront_vector)const noexcept{
auto mfront_success = true;
{
mfront::BehaviourProfiler::Timer mfront_local_timer_lu(NonLinearIsotropicViscosityProfiler::getProfiler(),mfront::BehaviourProfiler::TINYMATRIXSOLVE);
mfront_success = tfel::math::TinyNewtonRaphsonSolver<ModellingHypothesisToStensorSize<hypothesis>::value+1, NumericType, NonLinearIsotropicViscosity<hypothesis, NumericType, false>>::solveLinearSystem(mfront_matrix, mfront_vector);
}
return mfront_success;
}
/*!
* \brief compute fzeros and jacobian
*/
bool computeFdF(const bool perturbatedSystemEvaluation){
using namespace std;
using namespace tfel::math;
using std::vector;
mfront::BehaviourProfiler::Timer mfront_local_timer(NonLinearIsotropicViscosityProfiler::getProfiler(),mfront::BehaviourProfiler::COMPUTEFDF);
// silent compiler warning
static_cast<void>(perturbatedSystemEvaluation); 
constexpr auto eel_offset = 0;
constexpr auto p_offset = StensorSize;
auto feel = tfel::math::map<StrainStensor, 0>(this->fzeros);
real& fp(this->fzeros(StensorSize));
// derivative of residual feel with respect to variable eel
auto&& dfeel_ddeel = tfel::math::map_derivative<0, 0, StrainStensor, StrainStensor>(this->jacobian);
// derivative of residual feel with respect to variable p
auto&& dfeel_ddp = tfel::math::map_derivative<0, StensorSize, StrainStensor, strain>(this->jacobian);
// derivative of residual fp with respect to variable eel
auto&& dfp_ddeel = tfel::math::map_derivative<StensorSize, 0, strain, StrainStensor>(this->jacobian);
// derivative of residual fp with respect to variable p
auto&& dfp_ddp = tfel::math::map_derivative<StensorSize, StensorSize, strain, strain>(this->jacobian);
// setting jacobian to identity
std::fill(this->jacobian.begin(),this->jacobian.end(), NumericType(0));
for(ushort mfront_idx = 0; mfront_idx != StensorSize+1; ++mfront_idx){
this->jacobian(mfront_idx, mfront_idx) = NumericType(1);
}
// setting f values to zeros
this->fzeros = this->zeros;
feel -= this->deto;
#line 41 "NonLinearIsotropicViscosity.mfront"
constexpr const real eps = 1.e-12;
#line 42 "NonLinearIsotropicViscosity.mfront"
if ((this->Fel))
#line 43 "NonLinearIsotropicViscosity.mfront"
{
#line 44 "NonLinearIsotropicViscosity.mfront"
const auto mu       =   computeMu((this->young),(this->nu));
#line 45 "NonLinearIsotropicViscosity.mfront"
StressStensor scin  =   (this->sig);
#line 46 "NonLinearIsotropicViscosity.mfront"
const stress seq    =   sigmaeq(scin);
#line 48 "NonLinearIsotropicViscosity.mfront"
const real p_       =   (this->p) + theta*(this->dp);
#line 49 "NonLinearIsotropicViscosity.mfront"
const real Rp       =   (this->R_inf) + ((this->R_0) - (this->R_inf))*exp(-(this->b)*p_);
#line 51 "NonLinearIsotropicViscosity.mfront"
const stress F      =   max(seq - Rp, stress(0));
#line 52 "NonLinearIsotropicViscosity.mfront"
const real Fexp     =   pow(F/(this->K),(this->m)-1)/(this->K);
#line 53 "NonLinearIsotropicViscosity.mfront"
const auto iseq     =   1/max(seq,eps*(this->young));
#line 55 "NonLinearIsotropicViscosity.mfront"
const Stensor n     =   3*deviator(scin)*iseq/2;
#line 57 "NonLinearIsotropicViscosity.mfront"
const auto vp       =   Fexp*F;
#line 59 "NonLinearIsotropicViscosity.mfront"
feel += (this->dp)*n;
#line 60 "NonLinearIsotropicViscosity.mfront"
fp   -= vp * (this->dt);
#line 62 "NonLinearIsotropicViscosity.mfront"
const Stensor4 Jmn  =   Stensor4::M() - (n^n);
#line 63 "NonLinearIsotropicViscosity.mfront"
dfeel_ddp           =   n;
#line 64 "NonLinearIsotropicViscosity.mfront"
dfeel_ddeel        +=   2*mu*theta*(this->dp)*Jmn*iseq ;
#line 65 "NonLinearIsotropicViscosity.mfront"
dfp_ddp             =   1 + theta* Fexp *(this->m) *(this->dt)*(this->b)*((this->R_inf)-Rp);
#line 66 "NonLinearIsotropicViscosity.mfront"
dfp_ddeel           =   -2*Fexp*(this->m)*(this->dt)* 2.*mu*theta*(n|Stensor4::M())/3;
#line 67 "NonLinearIsotropicViscosity.mfront"
}
static_cast<void>(dfeel_ddeel); /* suppress potential warnings */
static_cast<void>(dfeel_ddp); /* suppress potential warnings */
static_cast<void>(dfp_ddeel); /* suppress potential warnings */
static_cast<void>(dfp_ddp); /* suppress potential warnings */
static_cast<void>(eel_offset);
static_cast<void>(p_offset);
return true;
}

std::pair<bool, real>
computeAPosterioriTimeStepScalingFactor(const real current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPosterioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                 current_time_step_scaling_factor)};
}

/*!
* \brief Update the internal energy at end of the time step
* \param[in] Psi_s: internal energy at end of the time step
*/
void computeInternalEnergy(stress& Psi_s) const
{
Psi_s=stress{0};
}

/*!
* \brief Update the dissipated energy at end of the time step
* \param[in] Psi_d: dissipated energy at end of the time step
*/
void computeDissipatedEnergy(stress& Psi_d) const
{
Psi_d=stress{0};
}

bool computeConsistentTangentOperator(const SMType smt){
using namespace std;
using namespace tfel::math;
using std::vector;
auto mfront_success = true;
TinyPermutation<StensorSize+1> jacobian_permutation;
if(!TinyMatrixSolve<StensorSize+1, NumericType, false>::decomp(this->jacobian,jacobian_permutation)){
return false;
}
struct TFEL_VISIBILITY_LOCAL GetPartialJacobianInvert{
GetPartialJacobianInvert(NonLinearIsotropicViscosity& mfront_behaviour_argument,
const tfel::math::TinyPermutation<StensorSize+1>& mfront_permutation_argument,
bool& mfront_success_argument)
: mfront_get_partial_jacobian_invert_behaviour(mfront_behaviour_argument),
mfront_get_partial_jacobian_invert_permutation(mfront_permutation_argument),
mfront_success_reference(mfront_success_argument){}
void operator()(tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel){
if(!this->mfront_get_partial_jacobian_invert_behaviour.computePartialJacobianInvert(this->mfront_get_partial_jacobian_invert_permutation, partial_jacobian_eel)){
this->mfront_success_reference = false;
}
}
void operator()(tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_p){
if(!this->mfront_get_partial_jacobian_invert_behaviour.computePartialJacobianInvert(this->mfront_get_partial_jacobian_invert_permutation, partial_jacobian_eel,
partial_jacobian_p)){
this->mfront_success_reference = false;
}
}
private:
NonLinearIsotropicViscosity& mfront_get_partial_jacobian_invert_behaviour;
const tfel::math::TinyPermutation<StensorSize+1>& mfront_get_partial_jacobian_invert_permutation;
bool& mfront_success_reference;
}; // end of struct GetPartialJacobianInvert
GetPartialJacobianInvert getPartialJacobianInvert(*this, jacobian_permutation, mfront_success);
{
mfront::BehaviourProfiler::Timer mfront_local_timer(NonLinearIsotropicViscosityProfiler::getProfiler(),mfront::BehaviourProfiler::COMPUTETANGENTOPERATOR);
if((smt==ELASTIC)||(smt==SECANTOPERATOR)){
computeAlteredElasticStiffness<hypothesis, stress>::exe(Dt,this->sebdata.lambda,this->sebdata.mu);
} else if (smt==CONSISTENTTANGENTOPERATOR){
StiffnessTensor Hooke;
Stensor4 Je;
computeElasticStiffness<N, stress>::exe(Hooke,this->sebdata.lambda,this->sebdata.mu);
getPartialJacobianInvert(Je);
Dt = Hooke*Je;
} else {
  return false;
}}

return mfront_success;
}

/*!
* \brief compute the sound velocity
* \param[in] rho_m0: mass density in the reference configuration
*/
speed computeSpeedOfSound(const massdensity&) const {
return speed(0);

}

const TangentOperator& getTangentOperator() const{
return this->Dt;
}

void updateExternalStateVariables(){
this->eto  += this->deto;
this->T += this->dT;
}

//!
~NonLinearIsotropicViscosity()
 override = default;

private:

std::pair<bool, real> computeAPrioriTimeStepScalingFactorII() const{
return {true, this->maximal_time_step_scaling_factor};
}

std::pair<bool, real> computeAPosterioriTimeStepScalingFactorII() const{
return {true,this->maximal_time_step_scaling_factor};
}

//! policy for treating out of bounds conditions
OutOfBoundsPolicy policy = tfel::material::None;

}; // end of NonLinearIsotropicViscosity class

template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
std::ostream&
operator <<(std::ostream& os,const NonLinearIsotropicViscosity<hypothesis, NumericType, false>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "Δεᵗᵒ : " << b.deto << '\n';
os << "σ : " << b.sig << '\n';
os << "Δt : " << b.dt << '\n';
os << "young : " << b.young << '\n';
os << "nu : " << b.nu << '\n';
os << "R_inf : " << b.R_inf << '\n';
os << "R_0 : " << b.R_0 << '\n';
os << "b : " << b.b << '\n';
os << "K : " << b.K << '\n';
os << "m : " << b.m << '\n';
os << "εᵉˡ : " << b.eel << '\n';
os << "Δεᵉˡ : " << b.deel << '\n';
os << "p : " << b.p << '\n';
os << "Δp : " << b.dp << '\n';
os << "T : " << b.T << '\n';
os << "ΔT : " << b.dT << '\n';
os << "relative_value_for_the_equivalent_stress_lower_bound : " << b.relative_value_for_the_equivalent_stress_lower_bound << '\n';
os << "θ : " << b.theta << '\n';
os << "ε : " << b.epsilon << '\n';
os << "jacobianComparisonCriterion : " << b.jacobianComparisonCriterion << '\n';
os << "minimal_time_step_scaling_factor : " << b.minimal_time_step_scaling_factor << '\n';
os << "maximal_time_step_scaling_factor : " << b.maximal_time_step_scaling_factor << '\n';
os << "numerical_jacobian_epsilon : " << b.numerical_jacobian_epsilon << '\n';
os << "iterMax : " << b.iterMax << '\n';
return os;
}

/*!
* Partial specialisation for NonLinearIsotropicViscosity.
*/
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
class MechanicalBehaviourTraits<NonLinearIsotropicViscosity<hypothesis, NumericType, false> >
{
using size_type = unsigned short;
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;
public:
static constexpr bool is_defined = true;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = N;
static constexpr size_type material_properties_nb = 7;
static constexpr size_type internal_variables_nb  = StensorSize+1;
static constexpr size_type external_variables_nb  = 1;
static constexpr size_type external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = true;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = true;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "NonLinearIsotropicViscosity";
}

};

/*!
* Partial specialisation for NonLinearIsotropicViscosity.
*/
template<typename NumericType>
class MechanicalBehaviourTraits<NonLinearIsotropicViscosity<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false> >
{
using size_type = unsigned short;
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
static constexpr size_type material_properties_nb = 0;
static constexpr size_type internal_variables_nb  = 0;
static constexpr size_type external_variables_nb  = 0;
static constexpr size_type external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "NonLinearIsotropicViscosity";
}

};

/*!
* Partial specialisation for NonLinearIsotropicViscosity.
*/
template<typename NumericType>
class MechanicalBehaviourTraits<NonLinearIsotropicViscosity<ModellingHypothesis::PLANESTRESS, NumericType, false> >
{
using size_type = unsigned short;
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
static constexpr size_type material_properties_nb = 0;
static constexpr size_type internal_variables_nb  = 0;
static constexpr size_type external_variables_nb  = 0;
static constexpr size_type external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "NonLinearIsotropicViscosity";
}

};

} // end of namespace tfel::material

#endif /* LIB_TFELMATERIAL_NONLINEARISOTROPICVISCOSITY_HXX */
