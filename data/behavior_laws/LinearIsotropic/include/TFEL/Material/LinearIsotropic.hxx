/*!
* \file   TFEL/Material/LinearIsotropic.hxx
* \brief  this file implements the LinearIsotropic Behaviour.
*         File generated by tfel version 4.1.0
* \author Baris Telmen
 */

#ifndef LIB_TFELMATERIAL_LINEARISOTROPIC_HXX
#define LIB_TFELMATERIAL_LINEARISOTROPIC_HXX

#include<string>
#include<iostream>
#include<limits>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Material/MaterialException.hxx"
#include"TFEL/Material/MechanicalBehaviour.hxx"
#include"TFEL/Material/MechanicalBehaviourTraits.hxx"
#include"TFEL/Material/OutOfBoundsPolicy.hxx"
#include"TFEL/Material/BoundsCheck.hxx"
#include"TFEL/Material/IsotropicPlasticity.hxx"
#include"TFEL/Material/Lame.hxx"
#include"TFEL/Material/Hosford1972YieldCriterion.hxx"
#include"TFEL/Material/LinearIsotropicBehaviourData.hxx"
#include"TFEL/Material/LinearIsotropicIntegrationData.hxx"

#include"MFront/Aster/Aster.hxx"

namespace tfel::material{

struct LinearIsotropicParametersInitializer
{
static LinearIsotropicParametersInitializer&
get();

double minimal_time_step_scaling_factor;
double maximal_time_step_scaling_factor;

void set(const char* const,const double);

/*!
 * \brief convert a string to double
 * \param[in] p : parameter
 * \param[in] v : value
 */
static double getDouble(const std::string&,const std::string&);
private :

LinearIsotropicParametersInitializer();

LinearIsotropicParametersInitializer(const LinearIsotropicParametersInitializer&);

LinearIsotropicParametersInitializer&
operator=(const LinearIsotropicParametersInitializer&);
/*!
 * \brief read the parameters from the given file
 * \param[out] pi : parameters initializer
 * \param[in]  fn : file name
 */
static void readParameters(LinearIsotropicParametersInitializer&,const char* const);
};

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis, typename NumericType, bool use_qt>
struct LinearIsotropic;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
std::ostream&
 operator <<(std::ostream&,const LinearIsotropic<hypothesis, NumericType, false>&);

/*!
* \class LinearIsotropic
* \brief This class implements the LinearIsotropic behaviour.
* \tparam hypothesis: modelling hypothesis.
* \tparam NumericType: numerical type.
* \author Baris Telmen
* A simple implementation of 
* isotropic linear hardening plasticity . 
*/
template<ModellingHypothesis::Hypothesis hypothesis,typename NumericType>
struct LinearIsotropic<hypothesis, NumericType, false> final
: public MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>,
public LinearIsotropicBehaviourData<hypothesis, NumericType, false>,
public LinearIsotropicIntegrationData<hypothesis, NumericType, false>
{

static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;

static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<NumericType>::cond);
static_assert(tfel::typetraits::IsReal<NumericType>::cond);

friend std::ostream& operator<< <>(std::ostream&,const LinearIsotropic&);

static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N, NumericType, false>;
using Type = NumericType;
using numeric_type = typename Types::numeric_type;
using real = typename Types::real;
using time = typename Types::time;
using length = typename Types::length;
using frequency = typename Types::frequency;
using speed = typename Types::speed;
using stress = typename Types::stress;
using strain = typename Types::strain;
using strainrate = typename Types::strainrate;
using stressrate = typename Types::stressrate;
using temperature = typename Types::temperature;
using thermalexpansion = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity = typename Types::massdensity;
using energydensity = typename Types::energydensity;
using TVector = typename Types::TVector;
using DisplacementTVector = typename Types::DisplacementTVector;
using ForceTVector = typename Types::ForceTVector;
using HeatFlux = typename Types::HeatFlux;
using TemperatureGradient = typename Types::TemperatureGradient;
using Stensor = typename Types::Stensor;
using StressStensor = typename Types::StressStensor;
using StressRateStensor = typename Types::StressRateStensor;
using StrainStensor = typename Types::StrainStensor;
using StrainRateStensor = typename Types::StrainRateStensor;
using FrequencyStensor = typename Types::FrequencyStensor;
using Tensor = typename Types::Tensor;
using DeformationGradientTensor = typename Types::DeformationGradientTensor;
using DeformationGradientRateTensor = typename Types::DeformationGradientRateTensor;
using StressTensor = typename Types::StressTensor;
using StiffnessTensor = typename Types::StiffnessTensor;
using Stensor4 = typename Types::Stensor4;
using TangentOperator = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<NumericType, false>;

public :

typedef LinearIsotropicBehaviourData<hypothesis, NumericType, false> BehaviourData;
typedef LinearIsotropicIntegrationData<hypothesis, NumericType, false> IntegrationData;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMFlag SMFlag;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMType SMType;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::ELASTIC;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SECANTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::TANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::CONSISTENTTANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::NOSTIFFNESSREQUESTED;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR;
using IntegrationResult = typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::IntegrationResult;

using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::UNRELIABLE_RESULTS;

using StressFreeExpansionType = StrainStensor;

private :



#line 9 "LinearIsotropic.mfront"
StrainStensor deel;
#line 11 "LinearIsotropic.mfront"
strain dp;


real minimal_time_step_scaling_factor;
real maximal_time_step_scaling_factor;

//! Tangent operator;
TangentOperator Dt;
//! alias to the tangent operator;
TangentOperator& dsig_ddeto;
/*!
* \brief Update internal variables at end of integration
*/
void updateIntegrationVariables(){
}

/*!
* \brief Update internal variables at end of integration
*/
void updateStateVariables(){
this->eel += this->deel;
this->p += this->dp;
}

/*!
* \brief Update auxiliary state variables at end of integration
*/
void updateAuxiliaryStateVariables()
{}

//! \brief Default constructor (disabled)
LinearIsotropic() =delete ;
//! \brief Copy constructor (disabled)
LinearIsotropic(const LinearIsotropic&) = delete;
//! \brief Assignement operator (disabled)
LinearIsotropic& operator = (const LinearIsotropic&) = delete;

public:

/*!
* \brief Constructor
*/
LinearIsotropic(const LinearIsotropicBehaviourData<hypothesis, NumericType, false>& src1,
const LinearIsotropicIntegrationData<hypothesis, NumericType, false>& src2)
: LinearIsotropicBehaviourData<hypothesis, NumericType, false>(src1),
LinearIsotropicIntegrationData<hypothesis, NumericType, false>(src2),
deel(typename tfel::math::MathObjectTraits<StrainStensor>::NumType(0)),
dp(strain(0)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->minimal_time_step_scaling_factor = LinearIsotropicParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = LinearIsotropicParametersInitializer::get().maximal_time_step_scaling_factor;
}

/*
 * \brief constructor for the Aster interface
 * \param[in] ASTERdt_: time increment
 * \param[in] ASTERT_: temperature
 * \param[in] ASTERdT_: temperature increment
 * \param[in] ASTERmat: material properties
 * \param[in] ASTERint_vars: state variables
 * \param[in] ASTERext_vars: external state variables
 * \param[in] ASTERdext_vars: external state variables increments
 */
LinearIsotropic(const NumericType* const ASTERdt_,
const NumericType* const ASTERT_,
const NumericType* const ASTERdT_,
const NumericType* const ASTERmat,
const NumericType* const ASTERint_vars,
const NumericType* const ASTERext_vars,
const NumericType* const ASTERdext_vars)
: LinearIsotropicBehaviourData<hypothesis, NumericType,false>(ASTERT_,ASTERmat,
ASTERint_vars,ASTERext_vars),
LinearIsotropicIntegrationData<hypothesis, NumericType,false>(ASTERdt_,ASTERdT_,ASTERdext_vars),
deel(typename tfel::math::MathObjectTraits<StrainStensor>::NumType(0)),
dp(strain(0)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->minimal_time_step_scaling_factor = LinearIsotropicParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = LinearIsotropicParametersInitializer::get().maximal_time_step_scaling_factor;
}

/*!
 * \ brief initialize the behaviour with user code
 */
[[nodiscard]] bool initialize(){
using namespace std;
using namespace tfel::math;
using std::vector;
return true;
}

/*!
 * \brief set the policy for "out of bounds" conditions
 */
void
setOutOfBoundsPolicy(const OutOfBoundsPolicy policy_value){
  this->policy = policy_value;
} // end of setOutOfBoundsPolicy

/*!
* \return the modelling hypothesis
*/
constexpr ModellingHypothesis::Hypothesis
getModellingHypothesis() const{
return hypothesis;
} // end of getModellingHypothesis

//! \brief check physical bounds and standard bounds
void checkBounds() const{
} // end of checkBounds

[[nodiscard]] IntegrationResult
computePredictionOperator(const SMFlag smflag,const SMType smt) override{
using namespace std;
using namespace tfel::math;
using std::vector;
tfel::raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid prediction operator flag");
#line 24 "LinearIsotropic.mfront"
const auto lambda = computeLambda((this->young), (this->nu));
#line 25 "LinearIsotropic.mfront"
const auto mu     = computeMu((this->young), (this->nu));
#line 26 "LinearIsotropic.mfront"
(this->Dt) = lambda * Stensor4::IxI() + 2 * mu * Stensor4::Id();return SUCCESS;
}

real getMinimalTimeStepScalingFactor() const noexcept override{
  return this->minimal_time_step_scaling_factor;
}

std::pair<bool, real>
computeAPrioriTimeStepScalingFactor(const real current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPrioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                  current_time_step_scaling_factor)};
}

/*!
* \brief Integrate behaviour  over the time step
*/
[[nodiscard]] IntegrationResult
integrate(const SMFlag smflag, const SMType smt) override{
using namespace std;
using namespace tfel::math;
raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid tangent operator flag");
bool computeTangentOperator_ = smt!=NOSTIFFNESSREQUESTED;
#line 32 "LinearIsotropic.mfront"
const auto lambda = computeLambda(this->young, this->nu);
#line 33 "LinearIsotropic.mfront"
const auto mu     = computeMu(this->young, this->nu);
#line 34 "LinearIsotropic.mfront"
this->eel += this->deto;
#line 35 "LinearIsotropic.mfront"
if(computeTangentOperator_){
#line 36 "LinearIsotropic.mfront"
this->Dt = lambda * Stensor4::IxI() + 2 * mu * Stensor4::Id();
#line 37 "LinearIsotropic.mfront"
}
#line 39 "LinearIsotropic.mfront"
const auto se     = 2 * mu * deviator(this->eel);
#line 40 "LinearIsotropic.mfront"
const auto seq_e  = sigmaeq(se);
#line 41 "LinearIsotropic.mfront"
const auto plastic_loading = seq_e > this->s0 + this->H * this->p;
#line 42 "LinearIsotropic.mfront"
if(plastic_loading){
#line 43 "LinearIsotropic.mfront"
const auto iseq_e = 1 / seq_e;
#line 44 "LinearIsotropic.mfront"
const auto n      = eval(3 * se / (2 * seq_e));
#line 45 "LinearIsotropic.mfront"
const auto cste   = 1 / (this->H + 3 * mu);
#line 46 "LinearIsotropic.mfront"
this->dp   = (seq_e - this->s0 - this->H * this->p) * cste;
#line 47 "LinearIsotropic.mfront"
this->eel -= this->dp * n;
#line 48 "LinearIsotropic.mfront"
if((computeTangentOperator_) && (smt==CONSISTENTTANGENTOPERATOR)){
#line 49 "LinearIsotropic.mfront"
this->Dt -= -4 * mu * mu * (this->dp * iseq_e * (Stensor4::M()-(n ^ n)) + cste * (n ^ n));
#line 50 "LinearIsotropic.mfront"
}
#line 51 "LinearIsotropic.mfront"
}
#line 52 "LinearIsotropic.mfront"
this->sig = lambda*trace(this->eel)*Stensor::Id()+2*mu*this->eel;
this->updateIntegrationVariables();
this->updateStateVariables();
this->updateAuxiliaryStateVariables();
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
}

std::pair<bool, real>
computeAPosterioriTimeStepScalingFactor(const real current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPosterioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                 current_time_step_scaling_factor)};
}

/*!
* \brief Update the internal energy at end of the time step
* \param[in] Psi_s: internal energy at end of the time step
*/
void computeInternalEnergy(stress& Psi_s) const
{
Psi_s=stress{0};
}

/*!
* \brief Update the dissipated energy at end of the time step
* \param[in] Psi_d: dissipated energy at end of the time step
*/
void computeDissipatedEnergy(stress& Psi_d) const
{
Psi_d=stress{0};
}

/*!
* \brief compute the sound velocity
* \param[in] rho_m0: mass density in the reference configuration
*/
speed computeSpeedOfSound(const massdensity&) const {
return speed(0);

}

const TangentOperator& getTangentOperator() const{
return this->Dt;
}

void updateExternalStateVariables(){
this->eto  += this->deto;
this->T += this->dT;
}

//!
~LinearIsotropic()
 override = default;

private:

std::pair<bool, real> computeAPrioriTimeStepScalingFactorII() const{
return {true, this->maximal_time_step_scaling_factor};
}

std::pair<bool, real> computeAPosterioriTimeStepScalingFactorII() const{
return {true,this->maximal_time_step_scaling_factor};
}

//! policy for treating out of bounds conditions
OutOfBoundsPolicy policy = tfel::material::None;

}; // end of LinearIsotropic class

template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
std::ostream&
operator <<(std::ostream& os,const LinearIsotropic<hypothesis, NumericType, false>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "Δεᵗᵒ : " << b.deto << '\n';
os << "σ : " << b.sig << '\n';
os << "Δt : " << b.dt << '\n';
os << "young : " << b.young << '\n';
os << "nu : " << b.nu << '\n';
os << "H : " << b.H << '\n';
os << "s0 : " << b.s0 << '\n';
os << "eel : " << b.eel << '\n';
os << "Δeel : " << b.deel << '\n';
os << "p : " << b.p << '\n';
os << "Δp : " << b.dp << '\n';
os << "T : " << b.T << '\n';
os << "ΔT : " << b.dT << '\n';
os << "minimal_time_step_scaling_factor : " << b.minimal_time_step_scaling_factor << '\n';
os << "maximal_time_step_scaling_factor : " << b.maximal_time_step_scaling_factor << '\n';
return os;
}

/*!
* Partial specialisation for LinearIsotropic.
*/
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
class MechanicalBehaviourTraits<LinearIsotropic<hypothesis, NumericType, false> >
{
using size_type = unsigned short;
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;
public:
static constexpr bool is_defined = true;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = N;
static constexpr size_type material_properties_nb = 4;
static constexpr size_type internal_variables_nb  = StensorSize+1;
static constexpr size_type external_variables_nb  = 1;
static constexpr size_type external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = true;
static constexpr bool isConsistentTangentOperatorSymmetric = true;
static constexpr bool hasPredictionOperator = true;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "LinearIsotropic";
}

};

/*!
* Partial specialisation for LinearIsotropic.
*/
template<typename NumericType>
class MechanicalBehaviourTraits<LinearIsotropic<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false> >
{
using size_type = unsigned short;
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
static constexpr size_type material_properties_nb = 0;
static constexpr size_type internal_variables_nb  = 0;
static constexpr size_type external_variables_nb  = 0;
static constexpr size_type external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "LinearIsotropic";
}

};

/*!
* Partial specialisation for LinearIsotropic.
*/
template<typename NumericType>
class MechanicalBehaviourTraits<LinearIsotropic<ModellingHypothesis::PLANESTRESS, NumericType, false> >
{
using size_type = unsigned short;
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
static constexpr size_type material_properties_nb = 0;
static constexpr size_type internal_variables_nb  = 0;
static constexpr size_type external_variables_nb  = 0;
static constexpr size_type external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "LinearIsotropic";
}

};

} // end of namespace tfel::material

#endif /* LIB_TFELMATERIAL_LINEARISOTROPIC_HXX */
