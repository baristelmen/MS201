/*!
* \file   TFEL/Material/LinearKinematic.hxx
* \brief  this file implements the LinearKinematic Behaviour.
*         File generated by tfel version 4.1.0
* \author Baris Telmen
 */

#ifndef LIB_TFELMATERIAL_LINEARKINEMATIC_HXX
#define LIB_TFELMATERIAL_LINEARKINEMATIC_HXX

#include<string>
#include<iostream>
#include<limits>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Material/MaterialException.hxx"
#include"TFEL/Material/MechanicalBehaviour.hxx"
#include"TFEL/Material/MechanicalBehaviourTraits.hxx"
#include"TFEL/Material/OutOfBoundsPolicy.hxx"
#include"TFEL/Material/BoundsCheck.hxx"
#include"TFEL/Material/IsotropicPlasticity.hxx"
#include"TFEL/Material/Lame.hxx"
#include"TFEL/Material/Hosford1972YieldCriterion.hxx"
#include"TFEL/Material/LinearKinematicBehaviourData.hxx"
#include"TFEL/Material/LinearKinematicIntegrationData.hxx"

#include"MFront/Aster/Aster.hxx"

namespace tfel::material{

struct LinearKinematicParametersInitializer
{
static LinearKinematicParametersInitializer&
get();

double minimal_time_step_scaling_factor;
double maximal_time_step_scaling_factor;

void set(const char* const,const double);

/*!
 * \brief convert a string to double
 * \param[in] p : parameter
 * \param[in] v : value
 */
static double getDouble(const std::string&,const std::string&);
private :

LinearKinematicParametersInitializer();

LinearKinematicParametersInitializer(const LinearKinematicParametersInitializer&);

LinearKinematicParametersInitializer&
operator=(const LinearKinematicParametersInitializer&);
/*!
 * \brief read the parameters from the given file
 * \param[out] pi : parameters initializer
 * \param[in]  fn : file name
 */
static void readParameters(LinearKinematicParametersInitializer&,const char* const);
};

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis, typename NumericType, bool use_qt>
struct LinearKinematic;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
std::ostream&
 operator <<(std::ostream&,const LinearKinematic<hypothesis, NumericType, false>&);

/*!
* \class LinearKinematic
* \brief This class implements the LinearKinematic behaviour.
* \tparam hypothesis: modelling hypothesis.
* \tparam NumericType: numerical type.
* \author Baris Telmen
* An explicit implementation of a simple 
* linear kinematic behaviour . 
*/
template<ModellingHypothesis::Hypothesis hypothesis,typename NumericType>
struct LinearKinematic<hypothesis, NumericType, false> final
: public MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>,
public LinearKinematicBehaviourData<hypothesis, NumericType, false>,
public LinearKinematicIntegrationData<hypothesis, NumericType, false>
{

static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;

static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<NumericType>::cond);
static_assert(tfel::typetraits::IsReal<NumericType>::cond);

friend std::ostream& operator<< <>(std::ostream&,const LinearKinematic&);

static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N, NumericType, false>;
using Type = NumericType;
using numeric_type = typename Types::numeric_type;
using real = typename Types::real;
using time = typename Types::time;
using length = typename Types::length;
using frequency = typename Types::frequency;
using speed = typename Types::speed;
using stress = typename Types::stress;
using strain = typename Types::strain;
using strainrate = typename Types::strainrate;
using stressrate = typename Types::stressrate;
using temperature = typename Types::temperature;
using thermalexpansion = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity = typename Types::massdensity;
using energydensity = typename Types::energydensity;
using TVector = typename Types::TVector;
using DisplacementTVector = typename Types::DisplacementTVector;
using ForceTVector = typename Types::ForceTVector;
using HeatFlux = typename Types::HeatFlux;
using TemperatureGradient = typename Types::TemperatureGradient;
using Stensor = typename Types::Stensor;
using StressStensor = typename Types::StressStensor;
using StressRateStensor = typename Types::StressRateStensor;
using StrainStensor = typename Types::StrainStensor;
using StrainRateStensor = typename Types::StrainRateStensor;
using FrequencyStensor = typename Types::FrequencyStensor;
using Tensor = typename Types::Tensor;
using DeformationGradientTensor = typename Types::DeformationGradientTensor;
using DeformationGradientRateTensor = typename Types::DeformationGradientRateTensor;
using StressTensor = typename Types::StressTensor;
using StiffnessTensor = typename Types::StiffnessTensor;
using Stensor4 = typename Types::Stensor4;
using TangentOperator = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<NumericType, false>;

public :

typedef LinearKinematicBehaviourData<hypothesis, NumericType, false> BehaviourData;
typedef LinearKinematicIntegrationData<hypothesis, NumericType, false> IntegrationData;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMFlag SMFlag;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMType SMType;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::ELASTIC;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SECANTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::TANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::CONSISTENTTANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::NOSTIFFNESSREQUESTED;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR;
using IntegrationResult = typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::IntegrationResult;

using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::UNRELIABLE_RESULTS;

using StressFreeExpansionType = StrainStensor;

private :



#line 9 "LinearKinematic.mfront"
StrainStensor deel;
#line 11 "LinearKinematic.mfront"
StrainStensor da;

#line 22 "LinearKinematic.mfront"
StressStensor sig0;
#line 23 "LinearKinematic.mfront"
Stensor n;
#line 24 "LinearKinematic.mfront"
stress lambda;
#line 25 "LinearKinematic.mfront"
stress mu;
#line 26 "LinearKinematic.mfront"
stress seq;
#line 27 "LinearKinematic.mfront"
strain dp;
#line 28 "LinearKinematic.mfront"
bool b;

real minimal_time_step_scaling_factor;
real maximal_time_step_scaling_factor;

//! Tangent operator;
TangentOperator Dt;
//! alias to the tangent operator;
TangentOperator& dsig_ddeto;
/*!
* \brief Update internal variables at end of integration
*/
void updateIntegrationVariables(){
}

/*!
* \brief Update internal variables at end of integration
*/
void updateStateVariables(){
this->eel += this->deel;
this->a += this->da;
}

/*!
* \brief Update auxiliary state variables at end of integration
*/
void updateAuxiliaryStateVariables()
{}

//! \brief Default constructor (disabled)
LinearKinematic() =delete ;
//! \brief Copy constructor (disabled)
LinearKinematic(const LinearKinematic&) = delete;
//! \brief Assignement operator (disabled)
LinearKinematic& operator = (const LinearKinematic&) = delete;

public:

/*!
* \brief Constructor
*/
LinearKinematic(const LinearKinematicBehaviourData<hypothesis, NumericType, false>& src1,
const LinearKinematicIntegrationData<hypothesis, NumericType, false>& src2)
: LinearKinematicBehaviourData<hypothesis, NumericType, false>(src1),
LinearKinematicIntegrationData<hypothesis, NumericType, false>(src2),
deel(typename tfel::math::MathObjectTraits<StrainStensor>::NumType(0)),
da(typename tfel::math::MathObjectTraits<StrainStensor>::NumType(0)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->minimal_time_step_scaling_factor = LinearKinematicParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = LinearKinematicParametersInitializer::get().maximal_time_step_scaling_factor;
}

/*
 * \brief constructor for the Aster interface
 * \param[in] ASTERdt_: time increment
 * \param[in] ASTERT_: temperature
 * \param[in] ASTERdT_: temperature increment
 * \param[in] ASTERmat: material properties
 * \param[in] ASTERint_vars: state variables
 * \param[in] ASTERext_vars: external state variables
 * \param[in] ASTERdext_vars: external state variables increments
 */
LinearKinematic(const NumericType* const ASTERdt_,
const NumericType* const ASTERT_,
const NumericType* const ASTERdT_,
const NumericType* const ASTERmat,
const NumericType* const ASTERint_vars,
const NumericType* const ASTERext_vars,
const NumericType* const ASTERdext_vars)
: LinearKinematicBehaviourData<hypothesis, NumericType,false>(ASTERT_,ASTERmat,
ASTERint_vars,ASTERext_vars),
LinearKinematicIntegrationData<hypothesis, NumericType,false>(ASTERdt_,ASTERdT_,ASTERdext_vars),
deel(typename tfel::math::MathObjectTraits<StrainStensor>::NumType(0)),
da(typename tfel::math::MathObjectTraits<StrainStensor>::NumType(0)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->minimal_time_step_scaling_factor = LinearKinematicParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = LinearKinematicParametersInitializer::get().maximal_time_step_scaling_factor;
}

/*!
 * \ brief initialize the behaviour with user code
 */
[[nodiscard]] bool initialize(){
using namespace std;
using namespace tfel::math;
using std::vector;
#line 31 "LinearKinematic.mfront"
this->lambda = computeLambda(this->young,this->nu);
#line 32 "LinearKinematic.mfront"
this->mu     = computeMu(this->young,this->nu);
#line 33 "LinearKinematic.mfront"
this->sig0   = this->sig;
return true;
}

/*!
 * \brief set the policy for "out of bounds" conditions
 */
void
setOutOfBoundsPolicy(const OutOfBoundsPolicy policy_value){
  this->policy = policy_value;
} // end of setOutOfBoundsPolicy

/*!
* \return the modelling hypothesis
*/
constexpr ModellingHypothesis::Hypothesis
getModellingHypothesis() const{
return hypothesis;
} // end of getModellingHypothesis

//! \brief check physical bounds and standard bounds
void checkBounds() const{
} // end of checkBounds

[[nodiscard]] IntegrationResult
computePredictionOperator(const SMFlag smflag,const SMType smt) override{
using namespace std;
using namespace tfel::math;
using std::vector;
tfel::raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid prediction operator flag");
#line 37 "LinearKinematic.mfront"
(this->Dt) = (this->lambda)*Stensor4::IxI()+2*(this->mu)*Stensor4::Id();return SUCCESS;
}

real getMinimalTimeStepScalingFactor() const noexcept override{
  return this->minimal_time_step_scaling_factor;
}

std::pair<bool, real>
computeAPrioriTimeStepScalingFactor(const real current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPrioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                  current_time_step_scaling_factor)};
}

/*!
* \brief Integrate behaviour  over the time step
*/
[[nodiscard]] IntegrationResult
integrate(const SMFlag smflag, const SMType smt) override{
using namespace std;
using namespace tfel::math;
raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid tangent operator flag");
bool computeTangentOperator_ = smt!=NOSTIFFNESSREQUESTED;
#line 41 "LinearKinematic.mfront"
this->eel += this->deto;
#line 42 "LinearKinematic.mfront"
const auto X  = 2*this->C*this->a/3;
#line 43 "LinearKinematic.mfront"
const auto s  = 2*this->mu*deviator(this->eel)-X;
#line 44 "LinearKinematic.mfront"
this->seq = sigmaeq(s);
#line 45 "LinearKinematic.mfront"
this->b   = this->seq-this->s0>stress{0};
#line 46 "LinearKinematic.mfront"
if(this->b){
#line 47 "LinearKinematic.mfront"
this->n    = (3*s)/(2*this->seq);
#line 48 "LinearKinematic.mfront"
this->dp   = (this->seq-this->s0)/(3*this->mu+this->C);
#line 49 "LinearKinematic.mfront"
this->a   += this->dp*this->n;
#line 50 "LinearKinematic.mfront"
this->eel -= this->dp*this->n;
#line 51 "LinearKinematic.mfront"
}
#line 52 "LinearKinematic.mfront"
this->sig = this->lambda*trace(this->eel)*Stensor::Id()+2*this->mu*this->eel;
this->updateIntegrationVariables();
this->updateStateVariables();
this->updateAuxiliaryStateVariables();
if(computeTangentOperator_){
if(!this->computeConsistentTangentOperator(smt)){
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
}
}
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
}

std::pair<bool, real>
computeAPosterioriTimeStepScalingFactor(const real current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPosterioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                 current_time_step_scaling_factor)};
}

/*!
* \brief Update the internal energy at end of the time step
* \param[in] Psi_s: internal energy at end of the time step
*/
void computeInternalEnergy(stress& Psi_s) const{
using namespace std;
using namespace tfel::math;
#line 65 "LinearKinematic.mfront"
const auto tr = trace(this->eel);
#line 66 "LinearKinematic.mfront"
Psi_s = this->lambda/2*tr*tr+this->mu*(this->eel|this->eel);
}

/*!
* \brief Update the dissipated energy at end of the time step
* \param[in] Psi_d: dissipated energy at end of the time step
*/
void computeDissipatedEnergy(stress& Psi_d) const{
using namespace std;
using namespace tfel::math;
#line 70 "LinearKinematic.mfront"
Psi_d += ((this->sig+this->sig0)|this->n)*this->dp/2;
}

bool computeConsistentTangentOperator(const SMType smt){
using namespace std;
using namespace tfel::math;
using std::vector;
auto mfront_success = true;
#line 56 "LinearKinematic.mfront"
if((smt==CONSISTENTTANGENTOPERATOR)&&(this->b)){
#line 57 "LinearKinematic.mfront"
this->Dt = (this->lambda*Stensor4::IxI()+2*this->mu*Stensor4::Id()
#line 58 "LinearKinematic.mfront"
-4*this->mu*this->mu*((this->dp/this->seq)*(Stensor4::M()-(this->n^this->n))+(this->n^this->n)/(3*this->mu+this->C)));
#line 59 "LinearKinematic.mfront"
} else {
#line 60 "LinearKinematic.mfront"
this->Dt = this->lambda*Stensor4::IxI()+2*this->mu*Stensor4::Id();
#line 61 "LinearKinematic.mfront"
}
return mfront_success;
}

/*!
* \brief compute the sound velocity
* \param[in] rho_m0: mass density in the reference configuration
*/
speed computeSpeedOfSound(const massdensity&) const {
return speed(0);

}

const TangentOperator& getTangentOperator() const{
return this->Dt;
}

void updateExternalStateVariables(){
this->eto  += this->deto;
this->T += this->dT;
}

//!
~LinearKinematic()
 override = default;

private:

std::pair<bool, real> computeAPrioriTimeStepScalingFactorII() const{
return {true, this->maximal_time_step_scaling_factor};
}

std::pair<bool, real> computeAPosterioriTimeStepScalingFactorII() const{
return {true,this->maximal_time_step_scaling_factor};
}

//! policy for treating out of bounds conditions
OutOfBoundsPolicy policy = tfel::material::None;

}; // end of LinearKinematic class

template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
std::ostream&
operator <<(std::ostream& os,const LinearKinematic<hypothesis, NumericType, false>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "Δεᵗᵒ : " << b.deto << '\n';
os << "σ : " << b.sig << '\n';
os << "Δt : " << b.dt << '\n';
os << "young : " << b.young << '\n';
os << "nu : " << b.nu << '\n';
os << "s0 : " << b.s0 << '\n';
os << "C : " << b.C << '\n';
os << "eel : " << b.eel << '\n';
os << "Δeel : " << b.deel << '\n';
os << "a : " << b.a << '\n';
os << "Δa : " << b.da << '\n';
os << "T : " << b.T << '\n';
os << "ΔT : " << b.dT << '\n';
os << "sig0 : " << b.sig0 << '\n';
os << "n : " << b.n << '\n';
os << "minimal_time_step_scaling_factor : " << b.minimal_time_step_scaling_factor << '\n';
os << "maximal_time_step_scaling_factor : " << b.maximal_time_step_scaling_factor << '\n';
return os;
}

/*!
* Partial specialisation for LinearKinematic.
*/
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
class MechanicalBehaviourTraits<LinearKinematic<hypothesis, NumericType, false> >
{
using size_type = unsigned short;
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;
public:
static constexpr bool is_defined = true;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = N;
static constexpr size_type material_properties_nb = 4;
static constexpr size_type internal_variables_nb  = 2*StensorSize;
static constexpr size_type external_variables_nb  = 1;
static constexpr size_type external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = true;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = true;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = true;
static constexpr bool hasComputeDissipatedEnergy = true;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "LinearKinematic";
}

};

/*!
* Partial specialisation for LinearKinematic.
*/
template<typename NumericType>
class MechanicalBehaviourTraits<LinearKinematic<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false> >
{
using size_type = unsigned short;
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
static constexpr size_type material_properties_nb = 0;
static constexpr size_type internal_variables_nb  = 0;
static constexpr size_type external_variables_nb  = 0;
static constexpr size_type external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "LinearKinematic";
}

};

/*!
* Partial specialisation for LinearKinematic.
*/
template<typename NumericType>
class MechanicalBehaviourTraits<LinearKinematic<ModellingHypothesis::PLANESTRESS, NumericType, false> >
{
using size_type = unsigned short;
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
static constexpr size_type material_properties_nb = 0;
static constexpr size_type internal_variables_nb  = 0;
static constexpr size_type external_variables_nb  = 0;
static constexpr size_type external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "LinearKinematic";
}

};

} // end of namespace tfel::material

#endif /* LIB_TFELMATERIAL_LINEARKINEMATIC_HXX */
